name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release
      - main
    tags:
      - 'v*'

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''
          - platform: 'ubuntu-22.04' # ARM64 cross-compile
            args: '--target aarch64-unknown-linux-gnu'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          # For ARM64 cross-compilation
          if [[ "${{ matrix.args }}" == *"aarch64-unknown-linux-gnu"* ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm' # Set this to npm, yarn or pnpm.

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || (contains(matrix.args, 'aarch64-unknown-linux-gnu') && 'aarch64-unknown-linux-gnu' || '') }}

      - name: Setup ARM64 cross-compilation
        if: matrix.platform == 'ubuntu-22.04' && contains(matrix.args, 'aarch64-unknown-linux-gnu')
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          # Add unique cache key for each platform and target
          shared-key: ${{ matrix.platform }}-${{ hashFiles('src-tauri/Cargo.lock') }}

      - name: Configure bundle targets for ARM64
        if: matrix.platform == 'ubuntu-22.04' && contains(matrix.args, 'aarch64-unknown-linux-gnu')
        run: |
          # Disable AppImage for ARM64 to avoid xdg-open issues
          jq '.bundle.targets = ["deb", "rpm"]' src-tauri/tauri.conf.json > temp.json && mv temp.json src-tauri/tauri.conf.json

      - name: install frontend dependencies
        run: pnpm install

      - name: Build frontend (for debugging)
        run: pnpm build

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEXT_PUBLIC_TFL_APP_KEY: ${{ secrets.NEXT_PUBLIC_TFL_APP_KEY }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.args }}
          includeDebug: false
          includeRelease: true
